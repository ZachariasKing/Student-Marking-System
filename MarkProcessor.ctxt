#BlueJ class context
comment0.target=MarkProcessor
comment0.text=\r\n\ 'MarkProcessor'\ handles\ all\ the\ data\ that\ essentially\ makes\ up\ a\ 'StudentRecord'\r\n\ object.\r\n\r\n\ This\ class\ reads\ the\ details\ of\ students\ such\ as\ their\ name\ and\ the\ marks\ \r\n\ they\ were\ allocated\ and\ stores\ that\ input\ in\ a\ 'StudentRecord'\ object\ which\ is\ then\ \r\n\ added\ to\ an\ <code>ArrayList</code>.\r\n\r\n\ @author\ Zacharias\ King\r\n\ @version\ 08/02/2018\r\n
comment1.params=
comment1.target=MarkProcessor()
comment1.text=\r\n\ Constructor\ for\ objects\ of\ class\ MarkProcessor\r\n
comment2.params=
comment2.target=java.lang.String\ getNameOfCohort()
comment2.text=\r\n\ This\ method\ returns\ the\ name\ of\ the\ student\ cohort.\r\n\ \r\n\ @return\ the\ name\ of\ the\ student\ cohort.\r\n
comment3.params=newNameOfCohort
comment3.target=void\ setNameOfCohort(java.lang.String)
comment3.text=\r\n\ This\ method\ returns\ the\ name\ of\ the\ student\ cohort.\r\n\ \r\n\ @param\ newName\ this\ is\ the\ name\ we\ want\ to\ assign\ as\ the\ new\ name\ of\ cohort.\r\n
comment4.params=newRecord
comment4.target=void\ storeStudentRecord(StudentRecord)
comment4.text=\r\n\ This\ method\ stores\ a\ student\ record\ in\ the\ 'markList'\ <code>ArrayList</code>.\r\n\ The\ private\ access\ modifier\ is\ used\ because\ we\ are\ only\ using\ this\ within\ the\ same\ class\ and\ it\ doesn't\r\n\ need\ to\ be\ used\ externally\ or\ by\ the\ user\ themselves.\r\n\ \r\n\ @param\ newRecord\ the\ record\ we\ want\ to\ store\ in\ 'marksList'.\r\n
comment5.params=
comment5.target=void\ displayResults()
comment5.text=\r\n\ This\ method\ prints\ the\ results\ that\ were\ read\ in\ from\ a\ file\ to\ the\ terminal\r\n\ window.\ \r\n\ \r\n
comment6.params=fileName
comment6.target=void\ readMarksData(java.lang.String)
comment6.text=\r\n\ This\ method\ reads\ data\ from\ a\ specified\ data\ file\ using\ the\ <code>Scanner</code>\ object\ and\ \r\n\ stores\ the\ marks\ of\ each\ student\ in\ an\ array.\r\n\ \r\n\ @param\ fileName\ The\ name\ of\ the\ file\ we\ want\ to\ read\ from.\r\n\ @throws\ FileNotFoundException\ If\ an\ I/O\ error\ occurs.\r\n\ \r\n
comment7.params=fileName
comment7.target=void\ writeMarksData(java.lang.String)
comment7.text=\r\n\ This\ method\ uses\ the\ same\ format\ as\ reading\ the\ data\ to\ write\ all\ student's\ records\ to\ a\ \r\n\ text\ file.\r\n\ \r\n\ @param\ fileName\ this\ allows\ us\ to\ set\ the\ name\ of\ the\ text\ file\ we\ want\ to\ write\ the\ student\ \r\n\ data\ to.\r\n\ @throws\ FileNotFoundException\ If\ an\ I/O\ error\ occurs.\r\n
comment8.params=
comment8.target=void\ clearMarksData()
comment8.text=\r\n\ This\ method\ iterates\ over\ and\ removes\ all\ entries\ from\ marksList,\ which\ is\ convenient\ \r\n\ when\ wanting\ to\ display\ other\ student\ results.\r\n\ \r\n
comment9.params=studentPosn\ markPosn\ newMark
comment9.target=void\ editMarksData(int,\ int,\ int)
comment9.text=\r\n\ This\ method\ iterates\ over\ and\ removes\ all\ entries\ from\ marksList,\ which\ is\ convenient\ \r\n\ when\ wanting\ to\ display\ other\ student\ results.\r\n\ \r\n\ @param\ studentPosn\ the\ position\ of\ the\ student\ in\ 'marksList'.\r\n\ @param\ markPosn\ the\ position\ of\ the\ mark\ in\ 'marks'.\r\n\ @param\ newMark\ the\ new\ mark\ we\ want\ to\ assign\ to\ the\ mark\ at\ the\ specified\ position.\r\n\ \r\n
numComments=10
